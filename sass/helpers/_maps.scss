
// SassyPher
// Helpers: maps
// -------------


// Fetch a deep value in a multi-level map.
// --------
// @source https://gist.github.com/HugoGiraudel/9933331
// --------
// @param [map] $map
// @param [list] $keys
// --------
// @return [literal]

@function map-fetch(
  $map,
  $keys
) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}


// Set or update a deep nested value in map.
// --------
// @param [map] $map
// @param [list] $keys
// @param [map] $new
// --------
// @return [literal]

@function map-deep-merge(
  $map,
  $keys,
  $new
) {
  $orig: $map;
  $cache: ();
  $length: length($keys);
  $last: nth($keys, $length);

  @if $length == 1 {
    @return map-merge($map, (nth($keys, 1): $new));
  }

  @each $key in $keys {
    $map: map-get($map, $key);
    @if $key == $last {
      $map: map-merge($map, $new);
    }
    $cache: append($cache, $map);
  }

  $i: $length;
  @while $i > 1 {
    $prev: $i - 1;
    $cache: set-nth($cache, $prev, map-merge(
      nth($cache, $prev),
      (nth($keys, $i): nth($cache, $i))
    ));
    $i: $prev;
  }

  @return map-merge($orig, (nth($keys, 1): nth($cache, 1)));
}


// Searches the map for a given value
// and returns the corresponding key if successful.
// --------
// @param [map] $map
// @param [literal] $value
// --------
// @return [literal]

@function map-search(
  $map,
  $value
) {
  $keys: map-keys($map);
  $values: map-values($map);
  $index: index($values, $value);

  @if not $index {
    @warn 'No value found for `#{$value}` in map.';
    @return false;
  }

  @return nth($keys, $index);
}
