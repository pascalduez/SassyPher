
// SassyPher
// Helpers: keys
// -------------


// require 'char-at' from 'extend/chars'
// require 'str-filter' from 'helpers/strings'


// Returns a keyed alphabet.
// --------
// @param [string] $key
// --------
// @return [string]

@function keyed-alpha($key) {
  $alpha: str-slice(charset(alpha), -26);
  $key: to-lower-case($key) + $alpha;
  $result: '';

  @for $i from 1 through str-length($key)  {
    $c: char-at($key, $i);
    @if str-index($alpha, $c) and not str-index($result, $c) {
      $result: $result + $c;
    }
  }

  @return to-upper-case($result) + $result;
}


// Returns a `key autokey` key.
// --------
// @param [string] $key
// @param [string] $message
// --------
// @return [string]

@function key-autokey(
  $key,
  $message
) {
  $key: str-filter($key);
  $message: str-filter($message);
  $length: str-length($message);
  $result: '';

  @while str-length($result) < $length {
    $result: $result + $key;
  }

  @return str-slice($result, 1, $length);
}


// Returns a `text autokey` key.
// --------
// @param [string] $key
// @param [string] $message
// --------
// @return [string]

@function text-autokey(
  $key,
  $message
) {
  $key: str-filter($key);
  $message: str-filter($message);
  $length: str-length($message);
  $result: $key + $message;

  @return str-slice($result, 1, $length);
}


// Filter and build a numeric key in range [0-25].
// --------
// @param [string] $key
// --------
// @return [list]

@function key(
  $key
) {
  $result: ();

  @for $i from 1 through str-length($key) {
    $c: char-code-at($key, $i);
    @if $c {
      $result: append($result, ($c - 1) % 26);
    }
  }

  @return $result;
}
