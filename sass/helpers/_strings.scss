
// SassyPher
// Helpers: strings
// ----------------


// require 'char-at' from 'extend/chars'
// require 'charset' from 'extend/chars'


// Return a reversed string.
// --------
// @param [string] $str
// --------
// @return [string]

@function str-reverse(
  $str
) {
  $result: '';

  @for $i from str-length($str) through 1 {
    $result: $result + char-at($str, $i);
  }

  @return $result;
}


// String split
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split

// Splits a String into a list of substrings using `$separator`.
// If separator is omitted, the list returned contains one element consisting of the entire string.
// If separator is an empty string, str is converted to a list of all characters.
// Integer specifying a limit on the number of splits to be found.
// The split method still splits on every match of separator, but it truncates the returned list to at most limit elements.
// --------
// @param [string] $str
// @param [string] $separator
// @param [$number] $limit
// --------
// @return [list]

@function str-split(
  $str,
  $separator: null,
  $limit: null
) {
  $result: zip(());

  @if not $separator {
    @return ($str,);
  }

  @if $separator == '' {
    @for $i from 1 through str-length($str) {
      $result: append($result, str-slice($str, $i, $i));
    }
    @return $result;
  }

  $running: true;
  $progress: $str;
  $length: str-length($separator);

  @while $running {
    $index: str-index($progress, $separator);
    @if $index {
      $result: append($result, str-slice($progress, 1, ($index - 1)));
      $progress: str-slice($progress, ($index + $length));
    }
    @else {
      $running: false;
    }
  }
  $result: append($result, $progress);

  @if $limit and $limit > 0 {
    $limit: if($limit > length($result), length($result), $limit);
    $return: ();
    @for $i from 1 through $limit {
      $return: append($return, nth($result, $i));
    }
    @return $return;
  }

  @return $result;
}


// Return a filtered string.
// --------
// @param [string] $str
// --------
// @return [string]

@function str-filter(
  $str,
  $charset: alphabetic
) {
  $chars: charset($charset);
  $result: '';

  @for $i from 1 through str-length($str)  {
    $c: char-at($str, $i);
    @if str-index($chars, $c) {
      $result: $result + $c;
    }
  }

  @return $result;
}
